warning: binding's name is too similar to existing binding
  --> $DIR/non_expressive_names.rs:29:9
   |
29 |     let bpple: i32;
   |         ^^^^^
   |
note: lint level defined here
  --> $DIR/non_expressive_names.rs:3:16
   |
3  | #![warn(clippy,similar_names)]
   |                ^^^^^^^^^^^^^
note: existing binding defined here
  --> $DIR/non_expressive_names.rs:27:9
   |
27 |     let apple: i32;
   |         ^^^^^
help: separate the discriminating character by an underscore like: `b_pple`
  --> $DIR/non_expressive_names.rs:29:9
   |
29 |     let bpple: i32;
   |         ^^^^^

warning: binding's name is too similar to existing binding
  --> $DIR/non_expressive_names.rs:31:9
   |
31 |     let cpple: i32;
   |         ^^^^^
   |
note: existing binding defined here
  --> $DIR/non_expressive_names.rs:27:9
   |
27 |     let apple: i32;
   |         ^^^^^
help: separate the discriminating character by an underscore like: `c_pple`
  --> $DIR/non_expressive_names.rs:31:9
   |
31 |     let cpple: i32;
   |         ^^^^^

warning: binding's name is too similar to existing binding
  --> $DIR/non_expressive_names.rs:56:9
   |
56 |     let bluby: i32;
   |         ^^^^^
   |
note: existing binding defined here
  --> $DIR/non_expressive_names.rs:55:9
   |
55 |     let blubx: i32;
   |         ^^^^^
help: separate the discriminating character by an underscore like: `blub_y`
  --> $DIR/non_expressive_names.rs:56:9
   |
56 |     let bluby: i32;
   |         ^^^^^

warning: binding's name is too similar to existing binding
  --> $DIR/non_expressive_names.rs:61:9
   |
61 |     let coke: i32;
   |         ^^^^
   |
note: existing binding defined here
  --> $DIR/non_expressive_names.rs:59:9
   |
59 |     let cake: i32;
   |         ^^^^

warning: binding's name is too similar to existing binding
  --> $DIR/non_expressive_names.rs:79:9
   |
79 |     let xyzeabc: i32;
   |         ^^^^^^^
   |
note: existing binding defined here
  --> $DIR/non_expressive_names.rs:77:9
   |
77 |     let xyz1abc: i32;
   |         ^^^^^^^

warning: binding's name is too similar to existing binding
  --> $DIR/non_expressive_names.rs:83:9
   |
83 |     let parsee: i32;
   |         ^^^^^^
   |
note: existing binding defined here
  --> $DIR/non_expressive_names.rs:81:9
   |
81 |     let parser: i32;
   |         ^^^^^^
help: separate the discriminating character by an underscore like: `parse_e`
  --> $DIR/non_expressive_names.rs:83:9
   |
83 |     let parsee: i32;
   |         ^^^^^^

warning: binding's name is too similar to existing binding
  --> $DIR/non_expressive_names.rs:97:16
   |
97 |         bpple: sprang } = unimplemented!();
   |                ^^^^^^
   |
note: existing binding defined here
  --> $DIR/non_expressive_names.rs:96:22
   |
96 |     let Foo { apple: spring,
   |                      ^^^^^^

warning: 5th binding whose name is just one char
   --> $DIR/non_expressive_names.rs:131:17
    |
131 |             let e: i32;
    |                 ^
    |
    = note: #[warn(many_single_char_names)] on by default

warning: 5th binding whose name is just one char
   --> $DIR/non_expressive_names.rs:135:17
    |
135 |             let e: i32;
    |                 ^
    |
    = note: #[warn(many_single_char_names)] on by default

warning: 6th binding whose name is just one char
   --> $DIR/non_expressive_names.rs:137:17
    |
137 |             let f: i32;
    |                 ^
    |
    = note: #[warn(many_single_char_names)] on by default

warning: 5th binding whose name is just one char
   --> $DIR/non_expressive_names.rs:142:13
    |
142 |             e => panic!(),
    |             ^
    |
    = note: #[warn(many_single_char_names)] on by default

warning: empty `loop {}` detected. You may want to either use `panic!()` or add `std::thread::sleep(..);` to the loop body.
  --> $DIR/non_expressive_names.rs:40:9
   |
40 |         loop {}
   |         ^^^^^^^
   |
   = note: #[warn(empty_loop)] on by default

warning: this let-binding has unit value. Consider omitting `let filled =`
   --> $DIR/non_expressive_names.rs:113:9
    |
113 |           let filled = match *self {
    |  _________^ starting here...
114 | |             MaybeInst::Split1(goto1) => panic!(1),
115 | |             MaybeInst::Split2(goto2) => panic!(2),
116 | |             _ => unimplemented!(),
117 | |         };
    | |__________^ ...ending here
    |
    = note: #[warn(let_unit_value)] on by default

