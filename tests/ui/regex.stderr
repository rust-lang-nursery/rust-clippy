warning: regex syntax error: empty alternate
  --> $DIR/regex.rs:16:45
   |
16 |     let pipe_in_wrong_position = Regex::new("|");
   |                                             ^^^
   |
note: lint level defined here
  --> $DIR/regex.rs:5:9
   |
5  | #![warn(invalid_regex, trivial_regex, regex_macro)]
   |         ^^^^^^^^^^^^^

warning: regex syntax error: empty alternate
  --> $DIR/regex.rs:18:60
   |
18 |     let pipe_in_wrong_position_builder = RegexBuilder::new("|");
   |                                                            ^^^

warning: regex syntax error: invalid character class range
  --> $DIR/regex.rs:20:40
   |
20 |     let wrong_char_ranice = Regex::new("[z-a]");
   |                                        ^^^^^^^

warning: regex syntax error: invalid character class range
  --> $DIR/regex.rs:22:35
   |
22 |     let some_unicode = Regex::new("[é-è]");
   |                                   ^^^^^^^

warning: regex syntax error on position 0: unclosed parenthesis
  --> $DIR/regex.rs:25:33
   |
25 |     let some_regex = Regex::new(OPENING_PAREN);
   |                                 ^^^^^^^^^^^^^

warning: regex syntax error: empty alternate
  --> $DIR/regex.rs:28:53
   |
28 |     let binary_pipe_in_wrong_position = BRegex::new("|");
   |                                                     ^^^

warning: regex syntax error on position 0: unclosed parenthesis
  --> $DIR/regex.rs:30:41
   |
30 |     let some_binary_regex = BRegex::new(OPENING_PAREN);
   |                                         ^^^^^^^^^^^^^

warning: regex syntax error on position 0: unclosed parenthesis
  --> $DIR/regex.rs:32:56
   |
32 |     let some_binary_regex_builder = BRegexBuilder::new(OPENING_PAREN);
   |                                                        ^^^^^^^^^^^^^

warning: regex syntax error on position 0: unclosed parenthesis
  --> $DIR/regex.rs:48:9
   |
48 |         OPENING_PAREN,
   |         ^^^^^^^^^^^^^

warning: regex syntax error on position 0: unclosed parenthesis
  --> $DIR/regex.rs:53:9
   |
53 |         OPENING_PAREN,
   |         ^^^^^^^^^^^^^

warning: trivial regex
  --> $DIR/regex.rs:60:33
   |
60 |     let trivial_eq = Regex::new("^foobar$");
   |                                 ^^^^^^^^^^
   |
   = note: #[warn(trivial_regex)] on by default
   = help: consider using consider using `==` on `str`s

warning: trivial regex
  --> $DIR/regex.rs:64:48
   |
64 |     let trivial_eq_builder = RegexBuilder::new("^foobar$");
   |                                                ^^^^^^^^^^
   |
   = note: #[warn(trivial_regex)] on by default
   = help: consider using consider using `==` on `str`s

warning: trivial regex
  --> $DIR/regex.rs:68:42
   |
68 |     let trivial_starts_with = Regex::new("^foobar");
   |                                          ^^^^^^^^^
   |
   = note: #[warn(trivial_regex)] on by default
   = help: consider using consider using `str::starts_with`

warning: trivial regex
  --> $DIR/regex.rs:72:40
   |
72 |     let trivial_ends_with = Regex::new("foobar$");
   |                                        ^^^^^^^^^
   |
   = note: #[warn(trivial_regex)] on by default
   = help: consider using consider using `str::ends_with`

warning: trivial regex
  --> $DIR/regex.rs:76:39
   |
76 |     let trivial_contains = Regex::new("foobar");
   |                                       ^^^^^^^^
   |
   = note: #[warn(trivial_regex)] on by default
   = help: consider using consider using `str::contains`

warning: trivial regex
  --> $DIR/regex.rs:80:39
   |
80 |     let trivial_contains = Regex::new(NOT_A_REAL_REGEX);
   |                                       ^^^^^^^^^^^^^^^^
   |
   = note: #[warn(trivial_regex)] on by default
   = help: consider using consider using `str::contains`

warning: trivial regex
  --> $DIR/regex.rs:84:40
   |
84 |     let trivial_backslash = Regex::new("a//.b");
   |                                        ^^^^^^^
   |
   = note: #[warn(trivial_regex)] on by default
   = help: consider using consider using `str::contains`

warning: trivial regex
  --> $DIR/regex.rs:89:36
   |
89 |     let trivial_empty = Regex::new("");
   |                                    ^^
   |
   = note: #[warn(trivial_regex)] on by default
   = help: consider using the regex is unlikely to be useful as it is

warning: trivial regex
  --> $DIR/regex.rs:93:36
   |
93 |     let trivial_empty = Regex::new("^");
   |                                    ^^^
   |
   = note: #[warn(trivial_regex)] on by default
   = help: consider using the regex is unlikely to be useful as it is

warning: trivial regex
  --> $DIR/regex.rs:97:36
   |
97 |     let trivial_empty = Regex::new("^$");
   |                                    ^^^^
   |
   = note: #[warn(trivial_regex)] on by default
   = help: consider using consider using `str::is_empty`

warning: trivial regex
   --> $DIR/regex.rs:101:44
    |
101 |     let binary_trivial_empty = BRegex::new("^$");
    |                                            ^^^^
    |
    = note: #[warn(trivial_regex)] on by default
    = help: consider using consider using `str::is_empty`

