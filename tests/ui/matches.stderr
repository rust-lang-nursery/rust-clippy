error: you don't need to add `&` to all patterns
  --> $DIR/matches.rs:6:9
   |
LL | /         match v {
LL | |             &Some(v) => println!("{:?}", v),
LL | |             &None => println!("none"),
LL | |         }
   | |_________^
   |
   = note: `-D clippy::match-ref-pats` implied by `-D warnings`
help: instead of prefixing all patterns with `&`, you can dereference the expression
   |
LL |         match *v {
LL |             Some(v) => println!("{:?}", v),
LL |             None => println!("none"),
   |

error: you don't need to add `&` to all patterns
  --> $DIR/matches.rs:17:5
   |
LL | /     match tup {
LL | |         &(v, 1) => println!("{}", v),
LL | |         _ => println!("none"),
LL | |     }
   | |_____^
help: instead of prefixing all patterns with `&`, you can dereference the expression
   |
LL |     match *tup {
LL |         (v, 1) => println!("{}", v),
   |

error: you don't need to add `&` to both the expression and the patterns
  --> $DIR/matches.rs:23:5
   |
LL | /     match &w {
LL | |         &Some(v) => println!("{:?}", v),
LL | |         &None => println!("none"),
LL | |     }
   | |_____^
help: try
   |
LL |     match w {
LL |         Some(v) => println!("{:?}", v),
LL |         None => println!("none"),
   |

error: you don't need to add `&` to all patterns
  --> $DIR/matches.rs:34:5
   |
LL | /     if let &None = a {
LL | |         println!("none");
LL | |     }
   | |_____^
help: instead of prefixing all patterns with `&`, you can dereference the expression
   |
LL |     if let None = *a {
   |            ^^^^   ^^

error: you don't need to add `&` to both the expression and the patterns
  --> $DIR/matches.rs:39:5
   |
LL | /     if let &None = &b {
LL | |         println!("none");
LL | |     }
   | |_____^
help: try
   |
LL |     if let None = b {
   |            ^^^^   ^

error: Err(_) will match all errors, maybe not a good idea
  --> $DIR/matches.rs:50:9
   |
LL |         Err(_) => panic!("err"),
   |         ^^^^^^
   |
   = note: `-D clippy::match-wild-err-arm` implied by `-D warnings`
   = note: to remove this warning, match each error separately or use unreachable macro

error: Err(_) will match all errors, maybe not a good idea
  --> $DIR/matches.rs:56:9
   |
LL |         Err(_) => panic!(),
   |         ^^^^^^
   |
   = note: to remove this warning, match each error separately or use unreachable macro

error: Err(_) will match all errors, maybe not a good idea
  --> $DIR/matches.rs:62:9
   |
LL |         Err(_) => {
   |         ^^^^^^
   |
   = note: to remove this warning, match each error separately or use unreachable macro

error: use as_ref() instead
  --> $DIR/matches.rs:136:33
   |
LL |       let borrowed: Option<&()> = match owned {
   |  _________________________________^
LL | |         None => None,
LL | |         Some(ref v) => Some(v),
LL | |     };
   | |_____^ help: try this: `owned.as_ref()`
   |
   = note: `-D clippy::match-as-ref` implied by `-D warnings`

error: use as_mut() instead
  --> $DIR/matches.rs:142:39
   |
LL |       let borrow_mut: Option<&mut ()> = match mut_owned {
   |  _______________________________________^
LL | |         None => None,
LL | |         Some(ref mut v) => Some(v),
LL | |     };
   | |_____^ help: try this: `mut_owned.as_mut()`

error: aborting due to 10 previous errors

