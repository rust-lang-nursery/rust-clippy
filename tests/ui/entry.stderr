warning: usage of `contains_key` followed by `insert` on a `HashMap`
  --> $DIR/entry.rs:13:5
   |
13 |     if !m.contains_key(&k) { m.insert(k, v); }
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: #[warn(map_entry)] on by default
help: consider using
   |     m.entry(k).or_insert(v)

warning: usage of `contains_key` followed by `insert` on a `HashMap`
  --> $DIR/entry.rs:20:5
   |
20 |     if !m.contains_key(&k) { foo(); m.insert(k, v); }
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: #[warn(map_entry)] on by default
help: consider using
   |     m.entry(k)

warning: usage of `contains_key` followed by `insert` on a `HashMap`
  --> $DIR/entry.rs:27:5
   |
27 |     if !m.contains_key(&k) { m.insert(k, v) } else { None };
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: #[warn(map_entry)] on by default
help: consider using
   |     m.entry(k);

warning: usage of `contains_key` followed by `insert` on a `HashMap`
  --> $DIR/entry.rs:34:5
   |
34 |     if m.contains_key(&k) { None } else { m.insert(k, v) };
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: #[warn(map_entry)] on by default
help: consider using
   |     m.entry(k);

warning: usage of `contains_key` followed by `insert` on a `HashMap`
  --> $DIR/entry.rs:41:5
   |
41 |     if !m.contains_key(&k) { foo(); m.insert(k, v) } else { None };
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: #[warn(map_entry)] on by default
help: consider using
   |     m.entry(k);

warning: usage of `contains_key` followed by `insert` on a `HashMap`
  --> $DIR/entry.rs:48:5
   |
48 |     if m.contains_key(&k) { None } else { foo(); m.insert(k, v) };
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: #[warn(map_entry)] on by default
help: consider using
   |     m.entry(k);

warning: usage of `contains_key` followed by `insert` on a `BTreeMap`
  --> $DIR/entry.rs:55:5
   |
55 |     if !m.contains_key(&k) { foo(); m.insert(k, v) } else { None };
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: #[warn(map_entry)] on by default
help: consider using
   |     m.entry(k);

