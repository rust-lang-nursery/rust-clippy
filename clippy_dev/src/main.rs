extern crate clap;
extern crate clippy_dev;
extern crate regex;

use clap::{App, Arg, SubCommand};
use clippy_dev::*;

fn main() {
    let matches = App::new("Clippy developer tooling")
        .subcommand(
            SubCommand::with_name("update_lints")
                .about("Update the lint list")
                .arg(
                    Arg::with_name("print-only")
                        .long("print-only")
                        .short("p")
                        .help("Print a table of lints to STDOUT. Does not modify any files."))
                .arg(
                    Arg::with_name("changes")
                        .short("c")
                        .help("Print a warning and set exit status to 1 if files would be changed"),
                ),
        )
        .get_matches();

    if let Some(matches) = matches.subcommand_matches("update_lints") {
        if matches.is_present("print-only") {
            print_lints();
        } else {
            update_lints();
        }
    }
}

fn print_lints() {
    let lint_list = gather_all().collect::<Vec<Lint>>();
    let grouped_by_lint_group = Lint::by_lint_group(&lint_list);

    for (lint_group, mut lints) in grouped_by_lint_group {
        if lint_group == "Deprecated" { continue; }
        println!("\n## {}", lint_group);

        lints.sort_by(|a, b| a.name.cmp(&b.name));

        for lint in lints {
            println!("* [{}]({}#{}) ({})", lint.name, clippy_dev::DOCS_LINK.clone(), lint.name, lint.desc);
        }
    }

    println!("there are {} lints", Lint::active_lints(&lint_list).count());
}


fn update_lints() {
    let lint_list = gather_all().collect::<Vec<Lint>>();
    let active_lints = Lint::active_lints(&lint_list);
    let lint_count = active_lints.count();
    let clippy_version = clippy_version_from_toml();

    replace_region_in_file(
        "../README.md",
        r#"\[There are \d+ lints included in this crate!\]\(https://rust-lang-nursery.github.io/rust-clippy/master/index.html\)"#,
        "",
        true,
        || {
            vec![
                format!("[There are {} lints included in this crate!](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)", lint_count)
            ]
        }
    );
    replace_region_in_file(
        "../CHANGELOG.md",
        "<!-- begin autogenerated links to lint list -->",
        "<!-- end autogenerated links to lint list -->",
        false,
        || {
            vec![
                // TODO
                //
    // lambda: ["[`{0}`]: {1}#{0}\n".format(l[1], docs_link) for l in
    //          sorted(all_lints + deprecated_lints,
    //                 key=lambda l: l[1])],
            ]
        }
    );
    replace_region_in_file(
        "../Cargo.toml",
        "# begin automatic update",
        "# end automatic update",
        false,
        || {
            vec![
                format!("clippy_lints = {{ version = \"{}\", path = \"clippy_lints\" }}\n", clippy_version)
            ]
        }
    );
    replace_region_in_file(
        "../clippy_lints/Cargo.toml",
        "# begin automatic update",
        "# end automatic update",
        false,
        || {
            vec![format!("version = {}", clippy_version)]
        }
    );
    replace_region_in_file(
        "../clippy_lints/src/lib.rs",
        "begin lints modules",
        "end lints modules",
        false,
        || {
            Lint::gen_pub_mod_for_group(&active_lints)
        }
    );
    replace_region_in_file(
        "../clippy_lints/src/lib.rs",
        r#"reg.register_lint_group\("clippy""#,
        r#"\]\);"#,
        false,
        || {
            vec![
                // TODO: gen_group
            ]
        }
    );
    // TODO: Add the register_lint_group inside the loop, too
}
